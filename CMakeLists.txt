# this is the build file for project openui
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(openui VERSION 0.0.1 LANGUAGES CXX C)

# target
add_library(app STATIC "")
set_target_properties(app PROPERTIES OUTPUT_NAME "app")
set_target_properties(app PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/release")
add_dependencies(app baseWindow)
target_include_directories(app PRIVATE
    src/app
    src/base
)
target_include_directories(app INTERFACE
    src/app
)
target_include_directories(app SYSTEM PRIVATE
    C:/Users/ws/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/include
)
target_compile_definitions(app PRIVATE
    GLFW_INCLUDE_NONE
)
target_compile_options(app PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
if(MSVC)
    target_compile_options(app PRIVATE -W0)
    target_compile_options(app PRIVATE -WX)
    target_compile_options(app PRIVATE -W4)
    target_compile_options(app PRIVATE nil)
else()
    target_compile_options(app PRIVATE -w)
    target_compile_options(app PRIVATE -Werror)
    target_compile_options(app PRIVATE -Wall -Wextra)
    target_compile_options(app PRIVATE nil)
endif()
if(MSVC)
    target_compile_options(app PRIVATE /EHsc)
else()
    target_compile_options(app PRIVATE -fcxx-exceptions)
endif()
set_target_properties(app PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(app PRIVATE c_std_99)
set_target_properties(app PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(app PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(app PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(app PRIVATE -O3)
endif()
if(MSVC)
    set_property(TARGET app PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(app PRIVATE
    glfw3
    opengl32
    baseWindow
    user32
    shell32
    gdi32
)
target_link_directories(app PRIVATE
    C:/Users/ws/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/lib
    build/windows/x64/release
)
target_sources(app PRIVATE
    src/app/OpenApplicaiton.cpp
)

# target
add_library(baseWindow STATIC "")
set_target_properties(baseWindow PROPERTIES OUTPUT_NAME "baseWindow")
set_target_properties(baseWindow PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/release")
target_include_directories(baseWindow PRIVATE
    src/base
)
target_include_directories(baseWindow INTERFACE
    src/base
)
target_compile_options(baseWindow PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
if(MSVC)
    target_compile_options(baseWindow PRIVATE -W0)
    target_compile_options(baseWindow PRIVATE -WX)
    target_compile_options(baseWindow PRIVATE -W4)
    target_compile_options(baseWindow PRIVATE nil)
else()
    target_compile_options(baseWindow PRIVATE -w)
    target_compile_options(baseWindow PRIVATE -Werror)
    target_compile_options(baseWindow PRIVATE -Wall -Wextra)
    target_compile_options(baseWindow PRIVATE nil)
endif()
if(MSVC)
    target_compile_options(baseWindow PRIVATE /EHsc)
else()
    target_compile_options(baseWindow PRIVATE -fcxx-exceptions)
endif()
set_target_properties(baseWindow PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(baseWindow PRIVATE c_std_99)
set_target_properties(baseWindow PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(baseWindow PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(baseWindow PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(baseWindow PRIVATE -O3)
endif()
if(MSVC)
    set_property(TARGET baseWindow PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_sources(baseWindow PRIVATE
    src/base/BaseWindow.cpp
)

# target
add_executable(openui "")
set_target_properties(openui PROPERTIES OUTPUT_NAME "openui")
set_target_properties(openui PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/release")
add_dependencies(openui app window thirdparty/webgpu)
target_include_directories(openui PRIVATE
        thirdparty/webgpu/include
    src/app
    src/window
    src/base
    D:/program/vulkan1_3_290/Include
        thirdparty/webgpu/include/webgpu
)
target_include_directories(openui INTERFACE
        thirdparty/webgpu/include
)
target_include_directories(openui SYSTEM PRIVATE
    C:/Users/ws/AppData/Local/.xmake/packages/g/glm/0.9.9+8/8335bab7c0314ab9921440de58961aac/include
    C:/Users/ws/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/include
)
target_compile_definitions(openui PRIVATE
    GLFW_INCLUDE_NONE
)
target_compile_options(openui PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
if(MSVC)
    target_compile_options(openui PRIVATE -W0)
    target_compile_options(openui PRIVATE -WX)
    target_compile_options(openui PRIVATE -W4)
    target_compile_options(openui PRIVATE nil)
else()
    target_compile_options(openui PRIVATE -w)
    target_compile_options(openui PRIVATE -Werror)
    target_compile_options(openui PRIVATE -Wall -Wextra)
    target_compile_options(openui PRIVATE nil)
endif()
if(MSVC)
    target_compile_options(openui PRIVATE /EHsc)
else()
    target_compile_options(openui PRIVATE -fcxx-exceptions)
endif()
set_target_properties(openui PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(openui PRIVATE c_std_99)
set_target_properties(openui PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(openui PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(openui PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(openui PRIVATE -O3)
endif()
if(MSVC)
    set_property(TARGET openui PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(openui PRIVATE
    wgpu_native
    glfw3
    opengl32
    app
    window
    vulkan-1
    baseWindow
        thirdparty/webgpu
    user32
    shell32
    gdi32
    opengl32
    ws2_32
    d3d11
    d3dcompiler
    ntdll
    ole32
    wsock32
    IPHLPAPI
    Psapi
    Userenv
    oleaut32
    Advapi32
)
target_link_directories(openui PRIVATE
        thirdparty/webgpu/lib
    C:/Users/ws/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/lib
    build/windows/x64/release
    D:/program/vulkan1_3_290/lib
)
target_sources(openui PRIVATE
    main.cpp
)

# target
add_library(thirdparty/webgpu STATIC "")
set_target_properties(thirdparty/webgpu PROPERTIES OUTPUT_NAME "thirdparty/webgpu")
set_target_properties(thirdparty/webgpu PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/release")
target_include_directories(thirdparty/webgpu PRIVATE
        thirdparty/webgpu/include
        thirdparty/webgpu/include/webgpu
)
target_include_directories(thirdparty/webgpu INTERFACE
        thirdparty/webgpu/include
        thirdparty/webgpu/include/webgpu
)
target_compile_options(thirdparty/webgpu PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
if(MSVC)
    target_compile_options(thirdparty/webgpu PRIVATE -W0)
    target_compile_options(thirdparty/webgpu PRIVATE -WX)
    target_compile_options(thirdparty/webgpu PRIVATE -W4)
    target_compile_options(thirdparty/webgpu PRIVATE nil)
else()
    target_compile_options(thirdparty/webgpu PRIVATE -w)
    target_compile_options(thirdparty/webgpu PRIVATE -Werror)
    target_compile_options(thirdparty/webgpu PRIVATE -Wall -Wextra)
    target_compile_options(thirdparty/webgpu PRIVATE nil)
endif()
if(MSVC)
    target_compile_options(thirdparty/webgpu PRIVATE /EHsc)
else()
    target_compile_options(thirdparty/webgpu PRIVATE -fcxx-exceptions)
endif()
set_target_properties(thirdparty/webgpu PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(thirdparty/webgpu PRIVATE c_std_99)
set_target_properties(thirdparty/webgpu PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(thirdparty/webgpu PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(thirdparty/webgpu PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(thirdparty/webgpu PRIVATE -O3)
endif()
if(MSVC)
    set_property(TARGET thirdparty/webgpu PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(thirdparty/webgpu PRIVATE
    wgpu_native
    opengl32
    user32
    gdi32
    ws2_32
    d3d11
    d3dcompiler
    ntdll
    ole32
    wsock32
    IPHLPAPI
    Psapi
    Userenv
    oleaut32
    Advapi32
)
target_link_directories(thirdparty/webgpu PRIVATE
        thirdparty/webgpu/lib
)
target_sources(thirdparty/webgpu PRIVATE
        thirdparty/webgpu/api.cpp
)

# target
add_library(window STATIC "")
set_target_properties(window PROPERTIES OUTPUT_NAME "window")
set_target_properties(window PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/windows/x64/release")
add_dependencies(window baseWindow vulkan)
target_include_directories(window PRIVATE
    src/window
    src/base
    D:/program/vulkan1_3_290/Include
)
target_include_directories(window INTERFACE
    src/window
)
target_include_directories(window SYSTEM PRIVATE
    C:/Users/ws/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/include
    D:/program/vulkan1_3_290/include
)
target_compile_definitions(window PRIVATE
    WGPU_SHARED_LIBRARY
    GLFW_INCLUDE_NONE
)
target_compile_options(window PRIVATE
    $<$<COMPILE_LANGUAGE:CXX>:/EHsc>
)
if(MSVC)
    target_compile_options(window PRIVATE -W0)
    target_compile_options(window PRIVATE -WX)
    target_compile_options(window PRIVATE -W4)
    target_compile_options(window PRIVATE nil)
else()
    target_compile_options(window PRIVATE -w)
    target_compile_options(window PRIVATE -Werror)
    target_compile_options(window PRIVATE -Wall -Wextra)
    target_compile_options(window PRIVATE nil)
endif()
if(MSVC)
    target_compile_options(window PRIVATE /EHsc)
else()
    target_compile_options(window PRIVATE -fcxx-exceptions)
endif()
set_target_properties(window PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(window PRIVATE c_std_99)
set_target_properties(window PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(window PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(window PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(window PRIVATE -O3)
endif()
if(MSVC)
    set_property(TARGET window PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(window PRIVATE
    glfw3
    opengl32
    vulkan-1
    baseWindow
    user32
    shell32
    gdi32
)
target_link_directories(window PRIVATE
    C:/Users/ws/AppData/Local/.xmake/packages/g/glfw/3.3.8/d12e591897c9472fb7d3725fa5811388/lib
    D:/program/vulkan1_3_290/lib
    build/windows/x64/release
)
target_sources(window PRIVATE
    src/window/MainWindow.cpp
)

